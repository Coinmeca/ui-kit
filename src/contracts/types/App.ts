/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Type {
  export type UserStruct = {
    point: BigNumberish;
    score: BigNumberish;
    name: string;
    img: string;
    app: string;
    user: string;
  };

  export type UserStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    point: BigNumber;
    score: BigNumber;
    name: string;
    img: string;
    app: string;
    user: string;
  };

  export type CreditStruct = {
    point: BigNumberish;
    score: BigNumberish;
    app: string;
  };

  export type CreditStructOutput = [BigNumber, BigNumber, string] & {
    point: BigNumber;
    score: BigNumber;
    app: string;
  };

  export type UserInfoStruct = {
    name: string;
    img: string;
    user: string;
    credit: Type.CreditStruct[];
  };

  export type UserInfoStructOutput = [
    string,
    string,
    string,
    Type.CreditStructOutput[]
  ] & {
    name: string;
    img: string;
    user: string;
    credit: Type.CreditStructOutput[];
  };

  export type OrderStruct = {
    key: BytesLike;
    category: BigNumberish;
    option: BigNumberish;
    state: BigNumberish;
    time: BigNumberish;
    price: BigNumberish;
    amount: BigNumberish;
    quantity: BigNumberish;
    fees: BigNumberish;
    pay: string;
    item: string;
    owner: string;
    market: string;
  };

  export type OrderStructOutput = [
    string,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    key: string;
    category: number;
    option: number;
    state: number;
    time: BigNumber;
    price: BigNumber;
    amount: BigNumber;
    quantity: BigNumber;
    fees: BigNumber;
    pay: string;
    item: string;
    owner: string;
    market: string;
  };
}

export declare namespace IdApp {
  export type ServiceStruct = { id: BigNumberish; service: string };

  export type ServiceStructOutput = [BigNumber, string] & {
    id: BigNumber;
    service: string;
  };
}

export interface AppInterface extends utils.Interface {
  functions: {
    "add_service(address)": FunctionFragment;
    "ban_check(address)": FunctionFragment;
    "ban_user(address,bool)": FunctionFragment;
    "check_permission(address)": FunctionFragment;
    "credit_decrease_point(address,uint256)": FunctionFragment;
    "credit_decrease_point_score(address,uint256,uint256)": FunctionFragment;
    "credit_decrease_score(address,uint256)": FunctionFragment;
    "credit_get_user(address)": FunctionFragment;
    "credit_get_user_info(address)": FunctionFragment;
    "credit_increase_point(address,uint256)": FunctionFragment;
    "credit_increase_point_score(address,uint256,uint256)": FunctionFragment;
    "credit_increase_score(address,uint256)": FunctionFragment;
    "credit_set_point(address,uint256)": FunctionFragment;
    "credit_set_point_score(address,uint256,uint256)": FunctionFragment;
    "credit_set_score(address,uint256)": FunctionFragment;
    "get_all_history(address)": FunctionFragment;
    "get_service()": FunctionFragment;
    "history_change(bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "history_change_push(bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "history_get(bytes32)": FunctionFragment;
    "history_get_all(address)": FunctionFragment;
    "history_get_by_index(address,uint256)": FunctionFragment;
    "history_get_count(address)": FunctionFragment;
    "history_push((bytes32,uint8,uint8,uint8,uint256,uint256,uint256,uint256,uint256,address,address,address,address))": FunctionFragment;
    "history_push_state((bytes32,uint8,uint8,uint8,uint256,uint256,uint256,uint256,uint256,address,address,address,address),uint8)": FunctionFragment;
    "history_remove(bytes32)": FunctionFragment;
    "history_set((bytes32,uint8,uint8,uint8,uint256,uint256,uint256,uint256,uint256,address,address,address,address))": FunctionFragment;
    "history_set_amount(bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "history_set_quantity(bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "history_set_state(bytes32,uint8)": FunctionFragment;
    "history_transfer(address,bytes32)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reward(address,uint256)": FunctionFragment;
    "service(uint256)": FunctionFragment;
    "set_auth(address)": FunctionFragment;
    "set_info(string,string,string,string,string)": FunctionFragment;
    "set_name(string)": FunctionFragment;
    "set_permission(address,bool)": FunctionFragment;
    "set_service(uint256,address)": FunctionFragment;
    "set_symbol(string)": FunctionFragment;
    "set_user_img(string)": FunctionFragment;
    "set_user_name(string)": FunctionFragment;
    "set_user_profile(string,string)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "yield(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add_service"
      | "ban_check"
      | "ban_user"
      | "check_permission"
      | "credit_decrease_point"
      | "credit_decrease_point_score"
      | "credit_decrease_score"
      | "credit_get_user"
      | "credit_get_user_info"
      | "credit_increase_point"
      | "credit_increase_point_score"
      | "credit_increase_score"
      | "credit_set_point"
      | "credit_set_point_score"
      | "credit_set_score"
      | "get_all_history"
      | "get_service"
      | "history_change"
      | "history_change_push"
      | "history_get"
      | "history_get_all"
      | "history_get_by_index"
      | "history_get_count"
      | "history_push"
      | "history_push_state"
      | "history_remove"
      | "history_set"
      | "history_set_amount"
      | "history_set_quantity"
      | "history_set_state"
      | "history_transfer"
      | "initialize"
      | "name"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "reward"
      | "service"
      | "set_auth"
      | "set_info"
      | "set_name"
      | "set_permission"
      | "set_service"
      | "set_symbol"
      | "set_user_img"
      | "set_user_name"
      | "set_user_profile"
      | "symbol"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "yield"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "add_service", values: [string]): string;
  encodeFunctionData(functionFragment: "ban_check", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ban_user",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "check_permission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_decrease_point",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_decrease_point_score",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_decrease_score",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_get_user",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_get_user_info",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_increase_point",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_increase_point_score",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_increase_score",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_set_point",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_set_point_score",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_set_score",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_all_history",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_service",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "history_change",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_change_push",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_get",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "history_get_all",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "history_get_by_index",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_get_count",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "history_push",
    values: [Type.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "history_push_state",
    values: [Type.OrderStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_remove",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "history_set",
    values: [Type.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "history_set_amount",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_set_quantity",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_set_state",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_transfer",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "service",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "set_auth", values: [string]): string;
  encodeFunctionData(
    functionFragment: "set_info",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "set_name", values: [string]): string;
  encodeFunctionData(
    functionFragment: "set_permission",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "set_service",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "set_symbol", values: [string]): string;
  encodeFunctionData(
    functionFragment: "set_user_img",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_user_name",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_user_profile",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "yield", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "add_service",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ban_check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ban_user", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "check_permission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_decrease_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_decrease_point_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_decrease_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_get_user",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_get_user_info",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_increase_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_increase_point_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_increase_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_set_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_set_point_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_set_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_all_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_service",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_change",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_change_push",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_get",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_get_all",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_get_by_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_get_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_push",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_push_state",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_remove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_set",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_set_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_set_quantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_set_state",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "service", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_auth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_permission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_service",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_user_img",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_user_name",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_user_profile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yield", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface App extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AppInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_service(
      _service: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ban_check(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    ban_user(
      _user: string,
      _state: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    check_permission(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    credit_decrease_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    credit_decrease_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    credit_decrease_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    credit_get_user(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[Type.UserStructOutput]>;

    credit_get_user_info(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[Type.UserInfoStructOutput]>;

    credit_increase_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    credit_increase_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    credit_increase_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    credit_set_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    credit_set_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    credit_set_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    get_all_history(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[Type.OrderStructOutput[]]>;

    get_service(
      overrides?: CallOverrides
    ): Promise<
      [IdApp.ServiceStructOutput[]] & { s: IdApp.ServiceStructOutput[] }
    >;

    history_change(
      _key: BytesLike,
      _amount: BigNumberish,
      _quantity: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_change_push(
      _key: BytesLike,
      _amount: BigNumberish,
      _quantity: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_get(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[Type.OrderStructOutput]>;

    history_get_all(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[Type.OrderStructOutput[]]>;

    history_get_by_index(
      _owner: string,
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Type.OrderStructOutput]>;

    history_get_count(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    history_push(
      _order: Type.OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_push_state(
      _order: Type.OrderStruct,
      _state: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_remove(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_set(
      _order: Type.OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_set_amount(
      _key: BytesLike,
      _amount: BigNumberish,
      _price: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_set_quantity(
      _key: BytesLike,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_set_state(
      _key: BytesLike,
      _state: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    history_transfer(
      _to: string,
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      _history: string,
      _credit: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reward(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    service(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    set_auth(
      _auth: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_info(
      _name: string,
      _symbol: string,
      _version: string,
      _url: string,
      _description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_name(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_permission(
      _address: string,
      _permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_service(
      _id: BigNumberish,
      _service: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_symbol(
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_user_img(
      _img: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_user_name(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_user_profile(
      _name: string,
      _img: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    yield(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  add_service(
    _service: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ban_check(_user: string, overrides?: CallOverrides): Promise<boolean>;

  ban_user(
    _user: string,
    _state: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  check_permission(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  credit_decrease_point(
    _user: string,
    _point: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  credit_decrease_point_score(
    _user: string,
    _point: BigNumberish,
    _score: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  credit_decrease_score(
    _user: string,
    _score: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  credit_get_user(
    _user: string,
    overrides?: CallOverrides
  ): Promise<Type.UserStructOutput>;

  credit_get_user_info(
    _user: string,
    overrides?: CallOverrides
  ): Promise<Type.UserInfoStructOutput>;

  credit_increase_point(
    _user: string,
    _point: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  credit_increase_point_score(
    _user: string,
    _point: BigNumberish,
    _score: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  credit_increase_score(
    _user: string,
    _score: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  credit_set_point(
    _user: string,
    _point: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  credit_set_point_score(
    _user: string,
    _point: BigNumberish,
    _score: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  credit_set_score(
    _user: string,
    _score: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  get_all_history(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<Type.OrderStructOutput[]>;

  get_service(overrides?: CallOverrides): Promise<IdApp.ServiceStructOutput[]>;

  history_change(
    _key: BytesLike,
    _amount: BigNumberish,
    _quantity: BigNumberish,
    _fee: BigNumberish,
    _divider: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_change_push(
    _key: BytesLike,
    _amount: BigNumberish,
    _quantity: BigNumberish,
    _fee: BigNumberish,
    _divider: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_get(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<Type.OrderStructOutput>;

  history_get_all(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<Type.OrderStructOutput[]>;

  history_get_by_index(
    _owner: string,
    _i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Type.OrderStructOutput>;

  history_get_count(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  history_push(
    _order: Type.OrderStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_push_state(
    _order: Type.OrderStruct,
    _state: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_remove(
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_set(
    _order: Type.OrderStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_set_amount(
    _key: BytesLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _fee: BigNumberish,
    _divider: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_set_quantity(
    _key: BytesLike,
    _quantity: BigNumberish,
    _price: BigNumberish,
    _fee: BigNumberish,
    _divider: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_set_state(
    _key: BytesLike,
    _state: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  history_transfer(
    _to: string,
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    _history: string,
    _credit: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reward(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  service(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  set_auth(
    _auth: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_info(
    _name: string,
    _symbol: string,
    _version: string,
    _url: string,
    _description: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_name(
    _name: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_permission(
    _address: string,
    _permission: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_service(
    _id: BigNumberish,
    _service: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_symbol(
    _symbol: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_user_img(
    _img: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_user_name(
    _name: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_user_profile(
    _name: string,
    _img: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  yield(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    add_service(
      _service: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ban_check(_user: string, overrides?: CallOverrides): Promise<boolean>;

    ban_user(
      _user: string,
      _state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    check_permission(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    credit_decrease_point(
      _user: string,
      _point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credit_decrease_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    credit_decrease_score(
      _user: string,
      _score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credit_get_user(
      _user: string,
      overrides?: CallOverrides
    ): Promise<Type.UserStructOutput>;

    credit_get_user_info(
      _user: string,
      overrides?: CallOverrides
    ): Promise<Type.UserInfoStructOutput>;

    credit_increase_point(
      _user: string,
      _point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credit_increase_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    credit_increase_score(
      _user: string,
      _score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credit_set_point(
      _user: string,
      _point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    credit_set_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    credit_set_score(
      _user: string,
      _score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    get_all_history(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<Type.OrderStructOutput[]>;

    get_service(
      overrides?: CallOverrides
    ): Promise<IdApp.ServiceStructOutput[]>;

    history_change(
      _key: BytesLike,
      _amount: BigNumberish,
      _quantity: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    history_change_push(
      _key: BytesLike,
      _amount: BigNumberish,
      _quantity: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    history_get(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<Type.OrderStructOutput>;

    history_get_all(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<Type.OrderStructOutput[]>;

    history_get_by_index(
      _owner: string,
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Type.OrderStructOutput>;

    history_get_count(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    history_push(
      _order: Type.OrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    history_push_state(
      _order: Type.OrderStruct,
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    history_remove(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    history_set(
      _order: Type.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    history_set_amount(
      _key: BytesLike,
      _amount: BigNumberish,
      _price: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    history_set_quantity(
      _key: BytesLike,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    history_set_state(
      _key: BytesLike,
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    history_transfer(
      _to: string,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _history: string,
      _credit: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reward(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    service(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    set_auth(_auth: string, overrides?: CallOverrides): Promise<void>;

    set_info(
      _name: string,
      _symbol: string,
      _version: string,
      _url: string,
      _description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    set_name(_name: string, overrides?: CallOverrides): Promise<void>;

    set_permission(
      _address: string,
      _permission: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    set_service(
      _id: BigNumberish,
      _service: string,
      overrides?: CallOverrides
    ): Promise<void>;

    set_symbol(_symbol: string, overrides?: CallOverrides): Promise<void>;

    set_user_img(_img: string, overrides?: CallOverrides): Promise<void>;

    set_user_name(_name: string, overrides?: CallOverrides): Promise<void>;

    set_user_profile(
      _name: string,
      _img: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    yield(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    add_service(
      _service: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ban_check(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    ban_user(
      _user: string,
      _state: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    check_permission(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credit_decrease_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    credit_decrease_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    credit_decrease_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    credit_get_user(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credit_get_user_info(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credit_increase_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    credit_increase_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    credit_increase_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    credit_set_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    credit_set_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    credit_set_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    get_all_history(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_service(overrides?: CallOverrides): Promise<BigNumber>;

    history_change(
      _key: BytesLike,
      _amount: BigNumberish,
      _quantity: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_change_push(
      _key: BytesLike,
      _amount: BigNumberish,
      _quantity: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_get(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    history_get_all(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    history_get_by_index(
      _owner: string,
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    history_get_count(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    history_push(
      _order: Type.OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_push_state(
      _order: Type.OrderStruct,
      _state: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_remove(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_set(
      _order: Type.OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_set_amount(
      _key: BytesLike,
      _amount: BigNumberish,
      _price: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_set_quantity(
      _key: BytesLike,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_set_state(
      _key: BytesLike,
      _state: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    history_transfer(
      _to: string,
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      _history: string,
      _credit: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reward(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    service(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    set_auth(
      _auth: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_info(
      _name: string,
      _symbol: string,
      _version: string,
      _url: string,
      _description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_name(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_permission(
      _address: string,
      _permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_service(
      _id: BigNumberish,
      _service: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_symbol(
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_user_img(
      _img: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_user_name(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_user_profile(
      _name: string,
      _img: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    yield(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add_service(
      _service: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ban_check(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ban_user(
      _user: string,
      _state: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    check_permission(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    credit_decrease_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    credit_decrease_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    credit_decrease_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    credit_get_user(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    credit_get_user_info(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    credit_increase_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    credit_increase_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    credit_increase_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    credit_set_point(
      _user: string,
      _point: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    credit_set_point_score(
      _user: string,
      _point: BigNumberish,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    credit_set_score(
      _user: string,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    get_all_history(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_service(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    history_change(
      _key: BytesLike,
      _amount: BigNumberish,
      _quantity: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_change_push(
      _key: BytesLike,
      _amount: BigNumberish,
      _quantity: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_get(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    history_get_all(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    history_get_by_index(
      _owner: string,
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    history_get_count(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    history_push(
      _order: Type.OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_push_state(
      _order: Type.OrderStruct,
      _state: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_remove(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_set(
      _order: Type.OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_set_amount(
      _key: BytesLike,
      _amount: BigNumberish,
      _price: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_set_quantity(
      _key: BytesLike,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _fee: BigNumberish,
      _divider: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_set_state(
      _key: BytesLike,
      _state: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    history_transfer(
      _to: string,
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      _history: string,
      _credit: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reward(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    service(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set_auth(
      _auth: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_info(
      _name: string,
      _symbol: string,
      _version: string,
      _url: string,
      _description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_name(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_permission(
      _address: string,
      _permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_service(
      _id: BigNumberish,
      _service: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_symbol(
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_user_img(
      _img: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_user_name(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_user_profile(
      _name: string,
      _img: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    yield(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
