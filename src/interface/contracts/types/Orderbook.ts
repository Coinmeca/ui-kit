/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Type {
  export type TickStruct = { price: BigNumberish; balance: BigNumberish };

  export type TickStructOutput = [BigNumber, BigNumber] & {
    price: BigNumber;
    balance: BigNumber;
  };

  export type OrderbookStruct = {
    asks: Type.TickStruct[];
    bids: Type.TickStruct[];
  };

  export type OrderbookStructOutput = [
    Type.TickStructOutput[],
    Type.TickStructOutput[]
  ] & { asks: Type.TickStructOutput[]; bids: Type.TickStructOutput[] };
}

export interface OrderbookInterface extends utils.Interface {
  functions: {
    "base()": FunctionFragment;
    "cancel(bytes32)": FunctionFragment;
    "check(bytes32)": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "get_asks(uint16)": FunctionFragment;
    "get_bids(uint16)": FunctionFragment;
    "get_info()": FunctionFragment;
    "get_nft()": FunctionFragment;
    "get_orderbook(uint8)": FunctionFragment;
    "initialize(address,address,uint256,address,address)": FunctionFragment;
    "order(uint256,address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "price()": FunctionFragment;
    "quote()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set_call_limit(uint8)": FunctionFragment;
    "set_fee(uint8)": FunctionFragment;
    "set_lock(bool)": FunctionFragment;
    "set_reward(uint8)": FunctionFragment;
    "tick()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "base"
      | "cancel"
      | "check"
      | "claim"
      | "get_asks"
      | "get_bids"
      | "get_info"
      | "get_nft"
      | "get_orderbook"
      | "initialize"
      | "order"
      | "owner"
      | "price"
      | "quote"
      | "renounceOwnership"
      | "set_call_limit"
      | "set_fee"
      | "set_lock"
      | "set_reward"
      | "tick"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "check", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "get_asks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_bids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get_info", values?: undefined): string;
  encodeFunctionData(functionFragment: "get_nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get_orderbook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "order",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(functionFragment: "quote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_call_limit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_fee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "set_lock", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "set_reward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tick", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_asks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_orderbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "order", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_call_limit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Ask(address,address,uint256,uint256)": EventFragment;
    "Bid(address,address,uint256,uint256)": EventFragment;
    "Buy(address,address,uint256,uint256,uint256)": EventFragment;
    "Cancel(address,uint256,uint256)": EventFragment;
    "Claim(address,address,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Liquidation(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Sell(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Ask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
}

export interface AskEventObject {
  _owner: string;
  _token: string;
  _price: BigNumber;
  _amount: BigNumber;
}
export type AskEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AskEventObject
>;

export type AskEventFilter = TypedEventFilter<AskEvent>;

export interface BidEventObject {
  _owner: string;
  _token: string;
  _price: BigNumber;
  _amount: BigNumber;
}
export type BidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BidEventObject
>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface BuyEventObject {
  _owner: string;
  _token: string;
  _price: BigNumber;
  _amount: BigNumber;
  _quantity: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface CancelEventObject {
  _token: string;
  _price: BigNumber;
  _amount: BigNumber;
}
export type CancelEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CancelEventObject
>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface ClaimEventObject {
  _owner: string;
  _token: string;
  _price: BigNumber;
  _amount: BigNumber;
  _quantity: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidationEventObject {
  _owner: string;
  _token: string;
  _amount: BigNumber;
}
export type LiquidationEvent = TypedEvent<
  [string, string, BigNumber],
  LiquidationEventObject
>;

export type LiquidationEventFilter = TypedEventFilter<LiquidationEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SellEventObject {
  _owner: string;
  _token: string;
  _price: BigNumber;
  _amount: BigNumber;
  _quantity: BigNumber;
}
export type SellEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  SellEventObject
>;

export type SellEventFilter = TypedEventFilter<SellEvent>;

export interface Orderbook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderbookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    base(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    check(_key: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    claim(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    get_asks(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Type.TickStructOutput[]]>;

    get_bids(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Type.TickStructOutput[]]>;

    get_info(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, number, boolean]>;

    get_nft(overrides?: CallOverrides): Promise<[string]>;

    get_orderbook(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Type.OrderbookStructOutput]>;

    initialize(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _nft: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    order(
      _option: BigNumberish,
      _sell: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    quote(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_call_limit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_fee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_lock(
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_reward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tick(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  base(overrides?: CallOverrides): Promise<string>;

  cancel(
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  check(_key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  claim(
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  get_asks(
    _range: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Type.TickStructOutput[]>;

  get_bids(
    _range: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Type.TickStructOutput[]>;

  get_info(
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber, number, boolean]>;

  get_nft(overrides?: CallOverrides): Promise<string>;

  get_orderbook(
    _range: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Type.OrderbookStructOutput>;

  initialize(
    _base: string,
    _quote: string,
    _price: BigNumberish,
    _nft: string,
    _app: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  order(
    _option: BigNumberish,
    _sell: string,
    _amount: BigNumberish,
    _price: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  quote(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_call_limit(
    _limit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_fee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_lock(
    _lock: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_reward(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tick(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    base(overrides?: CallOverrides): Promise<string>;

    cancel(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    check(_key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    claim(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    get_asks(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Type.TickStructOutput[]>;

    get_bids(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Type.TickStructOutput[]>;

    get_info(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, number, boolean]>;

    get_nft(overrides?: CallOverrides): Promise<string>;

    get_orderbook(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Type.OrderbookStructOutput>;

    initialize(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _nft: string,
      _app: string,
      overrides?: CallOverrides
    ): Promise<void>;

    order(
      _option: BigNumberish,
      _sell: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set_call_limit(
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_fee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    set_lock(_lock: boolean, overrides?: CallOverrides): Promise<void>;

    set_reward(_reward: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tick(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Ask(address,address,uint256,uint256)"(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null
    ): AskEventFilter;
    Ask(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null
    ): AskEventFilter;

    "Bid(address,address,uint256,uint256)"(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null
    ): BidEventFilter;
    Bid(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null
    ): BidEventFilter;

    "Buy(address,address,uint256,uint256,uint256)"(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null,
      _quantity?: null
    ): BuyEventFilter;
    Buy(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null,
      _quantity?: null
    ): BuyEventFilter;

    "Cancel(address,uint256,uint256)"(
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: BigNumberish | null
    ): CancelEventFilter;
    Cancel(
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: BigNumberish | null
    ): CancelEventFilter;

    "Claim(address,address,uint256,uint256,uint256)"(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null,
      _quantity?: null
    ): ClaimEventFilter;
    Claim(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null,
      _quantity?: null
    ): ClaimEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Liquidation(address,address,uint256)"(
      _owner?: string | null,
      _token?: string | null,
      _amount?: BigNumberish | null
    ): LiquidationEventFilter;
    Liquidation(
      _owner?: string | null,
      _token?: string | null,
      _amount?: BigNumberish | null
    ): LiquidationEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Sell(address,address,uint256,uint256,uint256)"(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null,
      _quantity?: null
    ): SellEventFilter;
    Sell(
      _owner?: string | null,
      _token?: string | null,
      _price?: BigNumberish | null,
      _amount?: null,
      _quantity?: null
    ): SellEventFilter;
  };

  estimateGas: {
    base(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    check(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    get_asks(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_bids(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_info(overrides?: CallOverrides): Promise<BigNumber>;

    get_nft(overrides?: CallOverrides): Promise<BigNumber>;

    get_orderbook(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _nft: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    order(
      _option: BigNumberish,
      _sell: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_call_limit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_fee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_lock(
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_reward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tick(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    check(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    get_asks(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_bids(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_orderbook(
      _range: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _nft: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    order(
      _option: BigNumberish,
      _sell: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_call_limit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_fee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_lock(
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_reward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tick(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
