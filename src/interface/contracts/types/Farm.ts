/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Type {
  export type FarmStruct = {
    farm: string;
    name: string;
    stake: string;
    earn: string;
    start: BigNumberish;
    period: BigNumberish;
    goal: BigNumberish;
    rewards: BigNumberish;
    locked: BigNumberish;
  };

  export type FarmStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    farm: string;
    name: string;
    stake: string;
    earn: string;
    start: BigNumber;
    period: BigNumber;
    goal: BigNumber;
    rewards: BigNumber;
    locked: BigNumber;
  };

  export type StakingStruct = {
    user: string;
    start: BigNumberish;
    period: BigNumberish;
    amount: BigNumberish;
    reward: BigNumberish;
    profit: BigNumberish;
  };

  export type StakingStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    start: BigNumber;
    period: BigNumber;
    amount: BigNumber;
    reward: BigNumber;
    profit: BigNumber;
  };
}

export interface FarmInterface extends utils.Interface {
  functions: {
    "add_reward(uint256)": FunctionFragment;
    "get_info()": FunctionFragment;
    "get_reward(address)": FunctionFragment;
    "get_staking(address)": FunctionFragment;
    "get_total_locked()": FunctionFragment;
    "get_total_rewards()": FunctionFragment;
    "harvest()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set_period(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add_reward"
      | "get_info"
      | "get_reward"
      | "get_staking"
      | "get_total_locked"
      | "get_total_rewards"
      | "harvest"
      | "initialize"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "set_period"
      | "stake"
      | "transferOwnership"
      | "unstake"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_reward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get_info", values?: undefined): string;
  encodeFunctionData(functionFragment: "get_reward", values: [string]): string;
  encodeFunctionData(functionFragment: "get_staking", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_total_locked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_total_rewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_period",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "add_reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_staking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_total_locked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_total_rewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_period", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Claim(address,uint256)": EventFragment;
    "Harvest(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ClaimEventObject {
  _user: string;
  _amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface HarvestEventObject {
  _user: string;
  _amount: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakeEventObject {
  _user: string;
  _amount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnstakeEventObject {
  _user: string;
  _amount: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Farm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_reward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    get_info(overrides?: CallOverrides): Promise<[Type.FarmStructOutput]>;

    get_reward(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    get_staking(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[Type.StakingStructOutput]>;

    get_total_locked(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_total_rewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      _farm: string,
      _token: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_period(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  add_reward(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  get_info(overrides?: CallOverrides): Promise<Type.FarmStructOutput>;

  get_reward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  get_staking(
    _user: string,
    overrides?: CallOverrides
  ): Promise<Type.StakingStructOutput>;

  get_total_locked(overrides?: CallOverrides): Promise<BigNumber>;

  get_total_rewards(overrides?: CallOverrides): Promise<BigNumber>;

  harvest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    _farm: string,
    _token: string,
    _app: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_period(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    add_reward(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    get_info(overrides?: CallOverrides): Promise<Type.FarmStructOutput>;

    get_reward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_staking(
      _user: string,
      overrides?: CallOverrides
    ): Promise<Type.StakingStructOutput>;

    get_total_locked(overrides?: CallOverrides): Promise<BigNumber>;

    get_total_rewards(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _farm: string,
      _token: string,
      _app: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set_period(_period: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Claim(address,uint256)"(
      _user?: string | null,
      _amount?: BigNumberish | null
    ): ClaimEventFilter;
    Claim(
      _user?: string | null,
      _amount?: BigNumberish | null
    ): ClaimEventFilter;

    "Harvest(address,uint256)"(
      _user?: string | null,
      _amount?: BigNumberish | null
    ): HarvestEventFilter;
    Harvest(
      _user?: string | null,
      _amount?: BigNumberish | null
    ): HarvestEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Stake(address,uint256)"(
      _user?: string | null,
      _amount?: BigNumberish | null
    ): StakeEventFilter;
    Stake(
      _user?: string | null,
      _amount?: BigNumberish | null
    ): StakeEventFilter;

    "Unstake(address,uint256)"(
      _user?: string | null,
      _amount?: BigNumberish | null
    ): UnstakeEventFilter;
    Unstake(
      _user?: string | null,
      _amount?: BigNumberish | null
    ): UnstakeEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    add_reward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    get_info(overrides?: CallOverrides): Promise<BigNumber>;

    get_reward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_staking(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_total_locked(overrides?: CallOverrides): Promise<BigNumber>;

    get_total_rewards(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    initialize(
      _farm: string,
      _token: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_period(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add_reward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    get_info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_reward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_staking(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_total_locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_total_rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      _farm: string,
      _token: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_period(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
