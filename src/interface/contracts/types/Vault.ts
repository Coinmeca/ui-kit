/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Type {
  export type TokenStruct = {
    key: boolean;
    addr: string;
    name: string;
    symbol: string;
    decimals: BigNumberish;
    treasury: BigNumberish;
    rate: BigNumberish;
    weight: BigNumberish;
    need: BigNumberish;
  };

  export type TokenStructOutput = [
    boolean,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    key: boolean;
    addr: string;
    name: string;
    symbol: string;
    decimals: number;
    treasury: BigNumber;
    rate: BigNumber;
    weight: BigNumber;
    need: BigNumber;
  };
}

export interface VaultInterface extends utils.Interface {
  functions: {
    "add_key_token(address,uint256)": FunctionFragment;
    "collect(address,address,uint256,address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "exchange(address,uint256)": FunctionFragment;
    "get_all()": FunctionFragment;
    "get_key_tokens()": FunctionFragment;
    "get_liquidity(address,address)": FunctionFragment;
    "get_need(address)": FunctionFragment;
    "get_tokens()": FunctionFragment;
    "get_value(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "listing(address,uint256,address[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "remit(address,address,uint256,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set_fee(uint8)": FunctionFragment;
    "set_permission(address,bool)": FunctionFragment;
    "set_reward(uint8)": FunctionFragment;
    "set_value(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add_key_token"
      | "collect"
      | "deposit"
      | "exchange"
      | "get_all"
      | "get_key_tokens"
      | "get_liquidity"
      | "get_need"
      | "get_tokens"
      | "get_value"
      | "initialize"
      | "listing"
      | "owner"
      | "proxiableUUID"
      | "remit"
      | "renounceOwnership"
      | "set_fee"
      | "set_permission"
      | "set_reward"
      | "set_value"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_key_token",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [string, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get_all", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get_key_tokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_liquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "get_need", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_tokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "get_value", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "listing",
    values: [string, BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remit",
    values: [string, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_fee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_permission",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_value",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "add_key_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_all", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_key_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_need", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_value", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_permission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_value", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "Fee(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KeyToken(address)": EventFragment;
    "Listing(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reward(uint256)": EventFragment;
    "Token(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Listing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Token"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepositEventObject {
  _address: string;
  _token: string;
  _amount: BigNumber;
  _meca: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FeeEventObject {
  fee: BigNumber;
}
export type FeeEvent = TypedEvent<[BigNumber], FeeEventObject>;

export type FeeEventFilter = TypedEventFilter<FeeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KeyTokenEventObject {
  _token: string;
}
export type KeyTokenEvent = TypedEvent<[string], KeyTokenEventObject>;

export type KeyTokenEventFilter = TypedEventFilter<KeyTokenEvent>;

export interface ListingEventObject {
  _token: string;
  _quantity: BigNumber;
  _proof: BigNumber;
}
export type ListingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ListingEventObject
>;

export type ListingEventFilter = TypedEventFilter<ListingEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardEventObject {
  reward: BigNumber;
}
export type RewardEvent = TypedEvent<[BigNumber], RewardEventObject>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface TokenEventObject {
  _token: string;
}
export type TokenEvent = TypedEvent<[string], TokenEventObject>;

export type TokenEventFilter = TypedEventFilter<TokenEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawEventObject {
  _address: string;
  _token: string;
  _amount: BigNumber;
  _meca: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_key_token(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collect(
      _from: string,
      _other: string,
      _price: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exchange(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_all(overrides?: CallOverrides): Promise<[Type.TokenStructOutput[]]>;

    get_key_tokens(
      overrides?: CallOverrides
    ): Promise<[Type.TokenStructOutput[]]>;

    get_liquidity(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { l: BigNumber }>;

    get_need(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    get_tokens(overrides?: CallOverrides): Promise<[Type.TokenStructOutput[]]>;

    get_value(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    listing(
      _base: string,
      _quantity: BigNumberish,
      _quotes: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    remit(
      _to: string,
      _other: string,
      _price: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_fee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_permission(
      _address: string,
      _permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_reward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    set_value(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  add_key_token(
    _token: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collect(
    _from: string,
    _other: string,
    _price: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exchange(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_all(overrides?: CallOverrides): Promise<Type.TokenStructOutput[]>;

  get_key_tokens(overrides?: CallOverrides): Promise<Type.TokenStructOutput[]>;

  get_liquidity(
    _base: string,
    _quote: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_need(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  get_tokens(overrides?: CallOverrides): Promise<Type.TokenStructOutput[]>;

  get_value(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _app: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  listing(
    _base: string,
    _quantity: BigNumberish,
    _quotes: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  remit(
    _to: string,
    _other: string,
    _price: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_fee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_permission(
    _address: string,
    _permission: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_reward(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  set_value(
    _token: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    add_key_token(
      _token: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collect(
      _from: string,
      _other: string,
      _price: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchange(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_all(overrides?: CallOverrides): Promise<Type.TokenStructOutput[]>;

    get_key_tokens(
      overrides?: CallOverrides
    ): Promise<Type.TokenStructOutput[]>;

    get_liquidity(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_need(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_tokens(overrides?: CallOverrides): Promise<Type.TokenStructOutput[]>;

    get_value(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_app: string, overrides?: CallOverrides): Promise<void>;

    listing(
      _base: string,
      _quantity: BigNumberish,
      _quotes: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    remit(
      _to: string,
      _other: string,
      _price: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set_fee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    set_permission(
      _address: string,
      _permission: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    set_reward(_reward: BigNumberish, overrides?: CallOverrides): Promise<void>;

    set_value(
      _token: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      _address?: string | null,
      _token?: string | null,
      _amount?: BigNumberish | null,
      _meca?: null
    ): DepositEventFilter;
    Deposit(
      _address?: string | null,
      _token?: string | null,
      _amount?: BigNumberish | null,
      _meca?: null
    ): DepositEventFilter;

    "Fee(uint256)"(fee?: BigNumberish | null): FeeEventFilter;
    Fee(fee?: BigNumberish | null): FeeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KeyToken(address)"(_token?: string | null): KeyTokenEventFilter;
    KeyToken(_token?: string | null): KeyTokenEventFilter;

    "Listing(address,uint256,uint256)"(
      _token?: string | null,
      _quantity?: BigNumberish | null,
      _proof?: BigNumberish | null
    ): ListingEventFilter;
    Listing(
      _token?: string | null,
      _quantity?: BigNumberish | null,
      _proof?: BigNumberish | null
    ): ListingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Reward(uint256)"(reward?: BigNumberish | null): RewardEventFilter;
    Reward(reward?: BigNumberish | null): RewardEventFilter;

    "Token(address)"(_token?: string | null): TokenEventFilter;
    Token(_token?: string | null): TokenEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      _address?: string | null,
      _token?: string | null,
      _amount?: BigNumberish | null,
      _meca?: null
    ): WithdrawEventFilter;
    Withdraw(
      _address?: string | null,
      _token?: string | null,
      _amount?: BigNumberish | null,
      _meca?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    add_key_token(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collect(
      _from: string,
      _other: string,
      _price: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exchange(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_all(overrides?: CallOverrides): Promise<BigNumber>;

    get_key_tokens(overrides?: CallOverrides): Promise<BigNumber>;

    get_liquidity(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_need(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_tokens(overrides?: CallOverrides): Promise<BigNumber>;

    get_value(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    listing(
      _base: string,
      _quantity: BigNumberish,
      _quotes: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    remit(
      _to: string,
      _other: string,
      _price: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_fee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_permission(
      _address: string,
      _permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_reward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    set_value(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add_key_token(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collect(
      _from: string,
      _other: string,
      _price: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exchange(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_all(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_key_tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_liquidity(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_need(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_value(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    listing(
      _base: string,
      _quantity: BigNumberish,
      _quotes: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remit(
      _to: string,
      _other: string,
      _price: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_fee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_permission(
      _address: string,
      _permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_reward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    set_value(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
