/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Type {
  export type MarketStruct = {
    orderbook: string;
    nft: string;
    symbol: string;
    name: string;
    base: string;
    quote: string;
    price: BigNumberish;
    tick: BigNumberish;
    fee: BigNumberish;
    lock: boolean;
  };

  export type MarketStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    boolean
  ] & {
    orderbook: string;
    nft: string;
    symbol: string;
    name: string;
    base: string;
    quote: string;
    price: BigNumber;
    tick: BigNumber;
    fee: number;
    lock: boolean;
  };
}

export interface MarketInterface extends utils.Interface {
  functions: {
    "create(address,address,uint256,address)": FunctionFragment;
    "get_all()": FunctionFragment;
    "get_markets(address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "lock(address,address,bool)": FunctionFragment;
    "open(address,address,uint256,address,address)": FunctionFragment;
    "orderbook(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "create"
      | "get_all"
      | "get_markets"
      | "initialize"
      | "lock"
      | "open"
      | "orderbook"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "get_all", values?: undefined): string;
  encodeFunctionData(functionFragment: "get_markets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderbook",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_all", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_markets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderbook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    get_all(overrides?: CallOverrides): Promise<[Type.MarketStructOutput[]]>;

    get_markets(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[Type.MarketStructOutput[]]>;

    initialize(
      _vault: string,
      _book: string,
      _order: string,
      _svg: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lock(
      _base: string,
      _quote: string,
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    open(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _svg: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    orderbook(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  create(
    _base: string,
    _quote: string,
    _price: BigNumberish,
    _app: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  get_all(overrides?: CallOverrides): Promise<Type.MarketStructOutput[]>;

  get_markets(
    _token: string,
    overrides?: CallOverrides
  ): Promise<Type.MarketStructOutput[]>;

  initialize(
    _vault: string,
    _book: string,
    _order: string,
    _svg: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lock(
    _base: string,
    _quote: string,
    _lock: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  open(
    _base: string,
    _quote: string,
    _price: BigNumberish,
    _svg: string,
    _app: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  orderbook(
    _base: string,
    _quote: string,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _app: string,
      overrides?: CallOverrides
    ): Promise<string>;

    get_all(overrides?: CallOverrides): Promise<Type.MarketStructOutput[]>;

    get_markets(
      _token: string,
      overrides?: CallOverrides
    ): Promise<Type.MarketStructOutput[]>;

    initialize(
      _vault: string,
      _book: string,
      _order: string,
      _svg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      _base: string,
      _quote: string,
      _lock: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    open(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _svg: string,
      _app: string,
      overrides?: CallOverrides
    ): Promise<string>;

    orderbook(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    create(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    get_all(overrides?: CallOverrides): Promise<BigNumber>;

    get_markets(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vault: string,
      _book: string,
      _order: string,
      _svg: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lock(
      _base: string,
      _quote: string,
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    open(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _svg: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    orderbook(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    get_all(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_markets(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _vault: string,
      _book: string,
      _order: string,
      _svg: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lock(
      _base: string,
      _quote: string,
      _lock: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    open(
      _base: string,
      _quote: string,
      _price: BigNumberish,
      _svg: string,
      _app: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    orderbook(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
